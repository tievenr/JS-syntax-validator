
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN DIVIDE DQUOTE ELSE EQ GE GEQ IDENTIFIER IF LBRACE LE LEQ LPAREN MINUS NOTEQ NUMBER PLUS PRINT RBRACE RPAREN SEMICOLON SQUOTE TIMES\n    if_else_statement : IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE\n                      | IF LPAREN condition RPAREN LBRACE statements RBRACE\n    \n    condition : expression LE expression\n              | expression GE expression\n              | expression LEQ expression\n              | expression GEQ expression\n              | expression EQ expression\n              | expression NOTEQ expression\n    expression : IDENTIFIER\n                  | NUMBER\n                  | expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expression\n                  | DQUOTE sentences DQUOTE\n                  | SQUOTE sentences SQUOTEsentences : sentence\n                 | sentence sentencessentence :  IDENTIFIER\n                  | NUMBER\n                  | sentence PLUS\n                  | sentence MINUS\n                  | sentence PLUS sentence\n                  | sentence MINUS sentence\n                  | sentence TIMES sentence\n                  | sentence DIVIDE sentence\n    statements : statement\n               | statement statements\n     \n    statement : assignment_statement\n             | print_statement\n    print_statement : PRINT LPAREN expression RPAREN SEMICOLON\n    assignment_statement : IDENTIFIER ASSIGN expression SEMICOLON\n                         | IDENTIFIER SEMICOLON\n    '
    
_lr_action_items = {'IF':([0,],[2,]),'$end':([1,54,67,],[0,-2,-1,]),'LPAREN':([2,49,],[3,58,]),'IDENTIFIER':([3,8,9,11,12,13,14,15,16,17,18,19,20,22,23,24,26,39,40,41,42,45,46,47,50,51,52,53,56,57,58,62,63,66,],[6,23,23,6,6,6,6,6,6,6,6,6,6,23,-19,-20,48,23,23,23,23,48,-29,-30,-23,-24,-25,-26,6,-33,6,48,-32,-31,]),'NUMBER':([3,8,9,11,12,13,14,15,16,17,18,19,20,22,23,24,39,40,41,42,50,51,52,53,56,58,],[7,24,24,7,7,7,7,7,7,7,7,7,7,24,-19,-20,24,24,24,24,-23,-24,-25,-26,7,7,]),'DQUOTE':([3,11,12,13,14,15,16,17,18,19,20,21,22,23,24,38,39,40,50,51,52,53,56,58,],[8,8,8,8,8,8,8,8,8,8,8,37,-17,-19,-20,-18,-21,-22,-23,-24,-25,-26,8,8,]),'SQUOTE':([3,11,12,13,14,15,16,17,18,19,20,22,23,24,25,38,39,40,50,51,52,53,56,58,],[9,9,9,9,9,9,9,9,9,9,9,-17,-19,-20,43,-18,-21,-22,-23,-24,-25,-26,9,9,]),'RPAREN':([4,6,7,27,28,29,30,31,32,33,34,35,36,37,43,61,],[10,-9,-10,-3,-4,-5,-6,-7,-8,-11,-12,-13,-14,-15,-16,64,]),'LE':([5,6,7,33,34,35,36,37,43,],[11,-9,-10,-11,-12,-13,-14,-15,-16,]),'GE':([5,6,7,33,34,35,36,37,43,],[12,-9,-10,-11,-12,-13,-14,-15,-16,]),'LEQ':([5,6,7,33,34,35,36,37,43,],[13,-9,-10,-11,-12,-13,-14,-15,-16,]),'GEQ':([5,6,7,33,34,35,36,37,43,],[14,-9,-10,-11,-12,-13,-14,-15,-16,]),'EQ':([5,6,7,33,34,35,36,37,43,],[15,-9,-10,-11,-12,-13,-14,-15,-16,]),'NOTEQ':([5,6,7,33,34,35,36,37,43,],[16,-9,-10,-11,-12,-13,-14,-15,-16,]),'PLUS':([5,6,7,22,23,24,27,28,29,30,31,32,33,34,35,36,37,39,40,43,50,51,52,53,60,61,],[17,-9,-10,39,-19,-20,17,17,17,17,17,17,17,17,17,17,-15,-21,-22,-16,39,39,39,39,17,17,]),'MINUS':([5,6,7,22,23,24,27,28,29,30,31,32,33,34,35,36,37,39,40,43,50,51,52,53,60,61,],[18,-9,-10,40,-19,-20,18,18,18,18,18,18,18,18,18,18,-15,-21,-22,-16,40,40,40,40,18,18,]),'TIMES':([5,6,7,22,23,24,27,28,29,30,31,32,33,34,35,36,37,39,40,43,50,51,52,53,60,61,],[19,-9,-10,41,-19,-20,19,19,19,19,19,19,19,19,19,19,-15,-21,-22,-16,41,41,41,41,19,19,]),'DIVIDE':([5,6,7,22,23,24,27,28,29,30,31,32,33,34,35,36,37,39,40,43,50,51,52,53,60,61,],[20,-9,-10,42,-19,-20,20,20,20,20,20,20,20,20,20,20,-15,-21,-22,-16,42,42,42,42,20,20,]),'SEMICOLON':([6,7,33,34,35,36,37,43,48,60,64,],[-9,-10,-11,-12,-13,-14,-15,-16,57,63,66,]),'LBRACE':([10,59,],[26,62,]),'PRINT':([26,45,46,47,57,62,63,66,],[49,49,-29,-30,-33,49,-32,-31,]),'RBRACE':([44,45,46,47,55,57,63,65,66,],[54,-27,-29,-30,-28,-33,-32,67,-31,]),'ASSIGN':([48,],[56,]),'ELSE':([54,],[59,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'if_else_statement':([0,],[1,]),'condition':([3,],[4,]),'expression':([3,11,12,13,14,15,16,17,18,19,20,56,58,],[5,27,28,29,30,31,32,33,34,35,36,60,61,]),'sentences':([8,9,22,],[21,25,38,]),'sentence':([8,9,22,39,40,41,42,],[22,22,22,50,51,52,53,]),'statements':([26,45,62,],[44,55,65,]),'statement':([26,45,62,],[45,45,45,]),'assignment_statement':([26,45,62,],[46,46,46,]),'print_statement':([26,45,62,],[47,47,47,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> if_else_statement","S'",1,None,None,None),
  ('if_else_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE','if_else_statement',11,'p_if_else_statement','yacc_conditional.py',6),
  ('if_else_statement -> IF LPAREN condition RPAREN LBRACE statements RBRACE','if_else_statement',7,'p_if_else_statement','yacc_conditional.py',7),
  ('condition -> expression LE expression','condition',3,'p_condition','yacc_conditional.py',17),
  ('condition -> expression GE expression','condition',3,'p_condition','yacc_conditional.py',18),
  ('condition -> expression LEQ expression','condition',3,'p_condition','yacc_conditional.py',19),
  ('condition -> expression GEQ expression','condition',3,'p_condition','yacc_conditional.py',20),
  ('condition -> expression EQ expression','condition',3,'p_condition','yacc_conditional.py',21),
  ('condition -> expression NOTEQ expression','condition',3,'p_condition','yacc_conditional.py',22),
  ('expression -> IDENTIFIER','expression',1,'p_expression','yacc_conditional.py',27),
  ('expression -> NUMBER','expression',1,'p_expression','yacc_conditional.py',28),
  ('expression -> expression PLUS expression','expression',3,'p_expression','yacc_conditional.py',29),
  ('expression -> expression MINUS expression','expression',3,'p_expression','yacc_conditional.py',30),
  ('expression -> expression TIMES expression','expression',3,'p_expression','yacc_conditional.py',31),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','yacc_conditional.py',32),
  ('expression -> DQUOTE sentences DQUOTE','expression',3,'p_expression','yacc_conditional.py',33),
  ('expression -> SQUOTE sentences SQUOTE','expression',3,'p_expression','yacc_conditional.py',34),
  ('sentences -> sentence','sentences',1,'p_sentences','yacc_conditional.py',44),
  ('sentences -> sentence sentences','sentences',2,'p_sentences','yacc_conditional.py',45),
  ('sentence -> IDENTIFIER','sentence',1,'p_sentence','yacc_conditional.py',52),
  ('sentence -> NUMBER','sentence',1,'p_sentence','yacc_conditional.py',53),
  ('sentence -> sentence PLUS','sentence',2,'p_sentence','yacc_conditional.py',54),
  ('sentence -> sentence MINUS','sentence',2,'p_sentence','yacc_conditional.py',55),
  ('sentence -> sentence PLUS sentence','sentence',3,'p_sentence','yacc_conditional.py',56),
  ('sentence -> sentence MINUS sentence','sentence',3,'p_sentence','yacc_conditional.py',57),
  ('sentence -> sentence TIMES sentence','sentence',3,'p_sentence','yacc_conditional.py',58),
  ('sentence -> sentence DIVIDE sentence','sentence',3,'p_sentence','yacc_conditional.py',59),
  ('statements -> statement','statements',1,'p_statements','yacc_conditional.py',68),
  ('statements -> statement statements','statements',2,'p_statements','yacc_conditional.py',69),
  ('statement -> assignment_statement','statement',1,'p_statement','yacc_conditional.py',78),
  ('statement -> print_statement','statement',1,'p_statement','yacc_conditional.py',79),
  ('print_statement -> PRINT LPAREN expression RPAREN SEMICOLON','print_statement',5,'p_print_statement','yacc_conditional.py',84),
  ('assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON','assignment_statement',4,'p_assignment_statement','yacc_conditional.py',89),
  ('assignment_statement -> IDENTIFIER SEMICOLON','assignment_statement',2,'p_assignment_statement','yacc_conditional.py',90),
]
